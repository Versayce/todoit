// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  sessionToken String   @unique
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Database Table Models
model User {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  firstName      String?
  lastName       String?
  email          String        @unique
  hashedPassword String?
  tasks          UserTask[]
  projects       Project[]
  ProjectTask    ProjectTask[]
  accounts       Account[]
  sessions       Session[]
}

model UserTask {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  title            String   @db.VarChar(100)
  description      String   @db.VarChar(255)
  priority         Int?
  startDate        DateTime
  endDate          DateTime
  completionStatus Boolean  @default(false)

  author   User @relation(fields: [authorId], references: [id])
  authorId Int
}

model Project {
  id               Int           @id @default(autoincrement())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  title            String        @db.VarChar(100)
  description      String        @db.VarChar(255)
  completionStatus Boolean       @default(false)
  startDate        DateTime
  endDate          DateTime
  projectTask      ProjectTask[]

  author   User @relation(fields: [authorId], references: [id])
  authorId Int
}

model ProjectTask {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  title            String   @db.VarChar(100)
  description      String   @db.VarChar(255)
  priority         Int?
  completionStatus Boolean  @default(false)
  startDate        DateTime
  endDate          DateTime

  author    User    @relation(fields: [authorId], references: [id])
  authorId  Int
  project   Project @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  projectId Int
}
