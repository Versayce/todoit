// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Database Table Models
model User {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  name           String?
  image          String?
  email          String        @unique
  hashedPassword String?
  tasks          UserTask[]
  projects       Project[]
  accounts       Account[]
  sessions       Session[]
  projectTasks   ProjectTask[]
}

model UserTask {
  id               String    @id @default(cuid())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  title            String    @db.VarChar(100)
  description      String    @db.VarChar(255)
  priority         Int?
  startDate        DateTime?
  endDate          DateTime?
  completionStatus Boolean   @default(false)

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
}

model Project {
  id               String        @id @default(cuid())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  title            String        @db.VarChar(100)
  description      String        @db.VarChar(255)
  completionStatus Boolean       @default(false)
  startDate        DateTime?
  endDate          DateTime?
  projectTasks     ProjectTask[]

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
}

model ProjectTask {
  id               String    @id @default(cuid())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  title            String    @db.VarChar(100)
  description      String    @db.VarChar(255)
  priority         Int?
  completionStatus Boolean   @default(false)
  startDate        DateTime?
  endDate          DateTime?

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
}
